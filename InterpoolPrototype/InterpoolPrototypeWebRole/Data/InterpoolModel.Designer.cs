//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("InterpoolModel", "GameSuspect", "Game", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(InterpoolPrototypeWebRole.Data.Game), "Suspect", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(InterpoolPrototypeWebRole.Data.Suspect))]
[assembly: EdmRelationshipAttribute("InterpoolModel", "GameNodePath", "Game", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(InterpoolPrototypeWebRole.Data.Game), "NodePath", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(InterpoolPrototypeWebRole.Data.NodePath))]
[assembly: EdmRelationshipAttribute("InterpoolModel", "NodePathFamous", "NodePath", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(InterpoolPrototypeWebRole.Data.NodePath), "Famous", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(InterpoolPrototypeWebRole.Data.Famous))]
[assembly: EdmRelationshipAttribute("InterpoolModel", "CityFamous", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(InterpoolPrototypeWebRole.Data.City), "Famous", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(InterpoolPrototypeWebRole.Data.Famous))]
[assembly: EdmRelationshipAttribute("InterpoolModel", "FamousNew", "Famous", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(InterpoolPrototypeWebRole.Data.Famous), "New", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(InterpoolPrototypeWebRole.Data.New))]
[assembly: EdmRelationshipAttribute("InterpoolModel", "NodePathClue", "NodePath", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(InterpoolPrototypeWebRole.Data.NodePath), "Clue", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(InterpoolPrototypeWebRole.Data.Clue))]
[assembly: EdmRelationshipAttribute("InterpoolModel", "ClueCity", "Clue", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(InterpoolPrototypeWebRole.Data.Clue), "City", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(InterpoolPrototypeWebRole.Data.City))]
[assembly: EdmRelationshipAttribute("InterpoolModel", "ClueFamous", "Clue", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(InterpoolPrototypeWebRole.Data.Clue), "Famous", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(InterpoolPrototypeWebRole.Data.Famous))]
[assembly: EdmRelationshipAttribute("InterpoolModel", "CityLevel", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(InterpoolPrototypeWebRole.Data.City), "Level", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(InterpoolPrototypeWebRole.Data.Level))]
[assembly: EdmRelationshipAttribute("InterpoolModel", "NodePathCity", "NodePath", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(InterpoolPrototypeWebRole.Data.NodePath), "City", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(InterpoolPrototypeWebRole.Data.City))]
[assembly: EdmRelationshipAttribute("InterpoolModel", "GameSuspect1", "Game", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(InterpoolPrototypeWebRole.Data.Game), "Suspect", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(InterpoolPrototypeWebRole.Data.Suspect))]
[assembly: EdmRelationshipAttribute("InterpoolModel", "UserGame", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(InterpoolPrototypeWebRole.Data.User), "Game", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(InterpoolPrototypeWebRole.Data.Game))]
[assembly: EdmRelationshipAttribute("InterpoolModel", "UserLevel", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(InterpoolPrototypeWebRole.Data.User), "Level", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(InterpoolPrototypeWebRole.Data.Level))]
[assembly: EdmRelationshipAttribute("InterpoolModel", "CityCityProperty", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(InterpoolPrototypeWebRole.Data.City), "CityProperty", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(InterpoolPrototypeWebRole.Data.CityProperty))]

#endregion

namespace InterpoolPrototypeWebRole.Data
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class InterpoolContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new InterpoolContainer object using the connection string found in the 'InterpoolContainer' section of the application configuration file.
        /// </summary>
        public InterpoolContainer() : base("name=InterpoolContainer", "InterpoolContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new InterpoolContainer object.
        /// </summary>
        public InterpoolContainer(string connectionString) : base(connectionString, "InterpoolContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new InterpoolContainer object.
        /// </summary>
        public InterpoolContainer(EntityConnection connection) : base(connection, "InterpoolContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Game> Games
        {
            get
            {
                if ((_Games == null))
                {
                    _Games = base.CreateObjectSet<Game>("Games");
                }
                return _Games;
            }
        }
        private ObjectSet<Game> _Games;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<NodePath> NodePaths
        {
            get
            {
                if ((_NodePaths == null))
                {
                    _NodePaths = base.CreateObjectSet<NodePath>("NodePaths");
                }
                return _NodePaths;
            }
        }
        private ObjectSet<NodePath> _NodePaths;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<City> Cities
        {
            get
            {
                if ((_Cities == null))
                {
                    _Cities = base.CreateObjectSet<City>("Cities");
                }
                return _Cities;
            }
        }
        private ObjectSet<City> _Cities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Famous> Famous
        {
            get
            {
                if ((_Famous == null))
                {
                    _Famous = base.CreateObjectSet<Famous>("Famous");
                }
                return _Famous;
            }
        }
        private ObjectSet<Famous> _Famous;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<New> News
        {
            get
            {
                if ((_News == null))
                {
                    _News = base.CreateObjectSet<New>("News");
                }
                return _News;
            }
        }
        private ObjectSet<New> _News;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Clue> Clues
        {
            get
            {
                if ((_Clues == null))
                {
                    _Clues = base.CreateObjectSet<Clue>("Clues");
                }
                return _Clues;
            }
        }
        private ObjectSet<Clue> _Clues;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Suspect> Suspects
        {
            get
            {
                if ((_Suspects == null))
                {
                    _Suspects = base.CreateObjectSet<Suspect>("Suspects");
                }
                return _Suspects;
            }
        }
        private ObjectSet<Suspect> _Suspects;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Level> Levels
        {
            get
            {
                if ((_Levels == null))
                {
                    _Levels = base.CreateObjectSet<Level>("Levels");
                }
                return _Levels;
            }
        }
        private ObjectSet<Level> _Levels;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CityProperty> CityPropertySet
        {
            get
            {
                if ((_CityPropertySet == null))
                {
                    _CityPropertySet = base.CreateObjectSet<CityProperty>("CityPropertySet");
                }
                return _CityPropertySet;
            }
        }
        private ObjectSet<CityProperty> _CityPropertySet;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Games EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGames(Game game)
        {
            base.AddObject("Games", game);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the NodePaths EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNodePaths(NodePath nodePath)
        {
            base.AddObject("NodePaths", nodePath);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Cities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCities(City city)
        {
            base.AddObject("Cities", city);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Famous EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFamous(Famous famous)
        {
            base.AddObject("Famous", famous);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the News EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNews(New @new)
        {
            base.AddObject("News", @new);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Clues EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToClues(Clue clue)
        {
            base.AddObject("Clues", clue);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Suspects EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSuspects(Suspect suspect)
        {
            base.AddObject("Suspects", suspect);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Levels EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLevels(Level level)
        {
            base.AddObject("Levels", level);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CityPropertySet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCityPropertySet(CityProperty cityProperty)
        {
            base.AddObject("CityPropertySet", cityProperty);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InterpoolModel", Name="City")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class City : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new City object.
        /// </summary>
        /// <param name="cityId">Initial value of the CityId property.</param>
        /// <param name="cityName">Initial value of the CityName property.</param>
        /// <param name="cityCountry">Initial value of the CityCountry property.</param>
        public static City CreateCity(global::System.Int32 cityId, global::System.String cityName, global::System.String cityCountry)
        {
            City city = new City();
            city.CityId = cityId;
            city.CityName = cityName;
            city.CityCountry = cityCountry;
            return city;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CityId
        {
            get
            {
                return _CityId;
            }
            set
            {
                if (_CityId != value)
                {
                    OnCityIdChanging(value);
                    ReportPropertyChanging("CityId");
                    _CityId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CityId");
                    OnCityIdChanged();
                }
            }
        }
        private global::System.Int32 _CityId;
        partial void OnCityIdChanging(global::System.Int32 value);
        partial void OnCityIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CityName
        {
            get
            {
                return _CityName;
            }
            set
            {
                OnCityNameChanging(value);
                ReportPropertyChanging("CityName");
                _CityName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CityName");
                OnCityNameChanged();
            }
        }
        private global::System.String _CityName;
        partial void OnCityNameChanging(global::System.String value);
        partial void OnCityNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CityCountry
        {
            get
            {
                return _CityCountry;
            }
            set
            {
                OnCityCountryChanging(value);
                ReportPropertyChanging("CityCountry");
                _CityCountry = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CityCountry");
                OnCityCountryChanged();
            }
        }
        private global::System.String _CityCountry;
        partial void OnCityCountryChanging(global::System.String value);
        partial void OnCityCountryChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "CityFamous", "Famous")]
        public EntityCollection<Famous> Famous
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Famous>("InterpoolModel.CityFamous", "Famous");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Famous>("InterpoolModel.CityFamous", "Famous", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "ClueCity", "Clue")]
        public EntityCollection<Clue> Clue
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Clue>("InterpoolModel.ClueCity", "Clue");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Clue>("InterpoolModel.ClueCity", "Clue", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "CityLevel", "Level")]
        public Level Level
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Level>("InterpoolModel.CityLevel", "Level").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Level>("InterpoolModel.CityLevel", "Level").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Level> LevelReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Level>("InterpoolModel.CityLevel", "Level");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Level>("InterpoolModel.CityLevel", "Level", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "NodePathCity", "NodePath")]
        public EntityCollection<NodePath> NodePath
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<NodePath>("InterpoolModel.NodePathCity", "NodePath");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<NodePath>("InterpoolModel.NodePathCity", "NodePath", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "CityCityProperty", "CityProperty")]
        public EntityCollection<CityProperty> CityProperty
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CityProperty>("InterpoolModel.CityCityProperty", "CityProperty");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CityProperty>("InterpoolModel.CityCityProperty", "CityProperty", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InterpoolModel", Name="CityProperty")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CityProperty : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CityProperty object.
        /// </summary>
        /// <param name="cityPropertyId">Initial value of the CityPropertyId property.</param>
        /// <param name="cityPropertyContent">Initial value of the CityPropertyContent property.</param>
        /// <param name="dynamic">Initial value of the Dynamic property.</param>
        public static CityProperty CreateCityProperty(global::System.Int32 cityPropertyId, global::System.String cityPropertyContent, global::System.Boolean dynamic)
        {
            CityProperty cityProperty = new CityProperty();
            cityProperty.CityPropertyId = cityPropertyId;
            cityProperty.CityPropertyContent = cityPropertyContent;
            cityProperty.Dynamic = dynamic;
            return cityProperty;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CityPropertyId
        {
            get
            {
                return _CityPropertyId;
            }
            set
            {
                if (_CityPropertyId != value)
                {
                    OnCityPropertyIdChanging(value);
                    ReportPropertyChanging("CityPropertyId");
                    _CityPropertyId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CityPropertyId");
                    OnCityPropertyIdChanged();
                }
            }
        }
        private global::System.Int32 _CityPropertyId;
        partial void OnCityPropertyIdChanging(global::System.Int32 value);
        partial void OnCityPropertyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CityPropertyContent
        {
            get
            {
                return _CityPropertyContent;
            }
            set
            {
                OnCityPropertyContentChanging(value);
                ReportPropertyChanging("CityPropertyContent");
                _CityPropertyContent = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CityPropertyContent");
                OnCityPropertyContentChanged();
            }
        }
        private global::System.String _CityPropertyContent;
        partial void OnCityPropertyContentChanging(global::System.String value);
        partial void OnCityPropertyContentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Dynamic
        {
            get
            {
                return _Dynamic;
            }
            set
            {
                OnDynamicChanging(value);
                ReportPropertyChanging("Dynamic");
                _Dynamic = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Dynamic");
                OnDynamicChanged();
            }
        }
        private global::System.Boolean _Dynamic;
        partial void OnDynamicChanging(global::System.Boolean value);
        partial void OnDynamicChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "CityCityProperty", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("InterpoolModel.CityCityProperty", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("InterpoolModel.CityCityProperty", "City").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("InterpoolModel.CityCityProperty", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("InterpoolModel.CityCityProperty", "City", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InterpoolModel", Name="Clue")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Clue : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Clue object.
        /// </summary>
        /// <param name="clueId">Initial value of the ClueId property.</param>
        public static Clue CreateClue(global::System.Int32 clueId)
        {
            Clue clue = new Clue();
            clue.ClueId = clueId;
            return clue;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ClueId
        {
            get
            {
                return _ClueId;
            }
            set
            {
                if (_ClueId != value)
                {
                    OnClueIdChanging(value);
                    ReportPropertyChanging("ClueId");
                    _ClueId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ClueId");
                    OnClueIdChanged();
                }
            }
        }
        private global::System.Int32 _ClueId;
        partial void OnClueIdChanging(global::System.Int32 value);
        partial void OnClueIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "NodePathClue", "NodePath")]
        public EntityCollection<NodePath> NodePath
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<NodePath>("InterpoolModel.NodePathClue", "NodePath");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<NodePath>("InterpoolModel.NodePathClue", "NodePath", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "ClueCity", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("InterpoolModel.ClueCity", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("InterpoolModel.ClueCity", "City").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("InterpoolModel.ClueCity", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("InterpoolModel.ClueCity", "City", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "ClueFamous", "Famous")]
        public Famous Famous
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Famous>("InterpoolModel.ClueFamous", "Famous").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Famous>("InterpoolModel.ClueFamous", "Famous").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Famous> FamousReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Famous>("InterpoolModel.ClueFamous", "Famous");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Famous>("InterpoolModel.ClueFamous", "Famous", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InterpoolModel", Name="Famous")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Famous : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Famous object.
        /// </summary>
        /// <param name="famousId">Initial value of the FamousId property.</param>
        /// <param name="famousName">Initial value of the FamousName property.</param>
        public static Famous CreateFamous(global::System.Int32 famousId, global::System.String famousName)
        {
            Famous famous = new Famous();
            famous.FamousId = famousId;
            famous.FamousName = famousName;
            return famous;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FamousId
        {
            get
            {
                return _FamousId;
            }
            set
            {
                if (_FamousId != value)
                {
                    OnFamousIdChanging(value);
                    ReportPropertyChanging("FamousId");
                    _FamousId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FamousId");
                    OnFamousIdChanged();
                }
            }
        }
        private global::System.Int32 _FamousId;
        partial void OnFamousIdChanging(global::System.Int32 value);
        partial void OnFamousIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FamousName
        {
            get
            {
                return _FamousName;
            }
            set
            {
                OnFamousNameChanging(value);
                ReportPropertyChanging("FamousName");
                _FamousName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FamousName");
                OnFamousNameChanged();
            }
        }
        private global::System.String _FamousName;
        partial void OnFamousNameChanging(global::System.String value);
        partial void OnFamousNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "NodePathFamous", "NodePath")]
        public EntityCollection<NodePath> NodePath
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<NodePath>("InterpoolModel.NodePathFamous", "NodePath");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<NodePath>("InterpoolModel.NodePathFamous", "NodePath", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "CityFamous", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("InterpoolModel.CityFamous", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("InterpoolModel.CityFamous", "City").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("InterpoolModel.CityFamous", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("InterpoolModel.CityFamous", "City", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "FamousNew", "New")]
        public EntityCollection<New> New
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<New>("InterpoolModel.FamousNew", "New");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<New>("InterpoolModel.FamousNew", "New", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "ClueFamous", "Clue")]
        public Clue Clue
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Clue>("InterpoolModel.ClueFamous", "Clue").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Clue>("InterpoolModel.ClueFamous", "Clue").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Clue> ClueReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Clue>("InterpoolModel.ClueFamous", "Clue");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Clue>("InterpoolModel.ClueFamous", "Clue", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InterpoolModel", Name="Game")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Game : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Game object.
        /// </summary>
        /// <param name="gameId">Initial value of the GameId property.</param>
        /// <param name="gameTime">Initial value of the GameTime property.</param>
        public static Game CreateGame(global::System.Int32 gameId, global::System.Int16 gameTime)
        {
            Game game = new Game();
            game.GameId = gameId;
            game.GameTime = gameTime;
            return game;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GameId
        {
            get
            {
                return _GameId;
            }
            set
            {
                if (_GameId != value)
                {
                    OnGameIdChanging(value);
                    ReportPropertyChanging("GameId");
                    _GameId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GameId");
                    OnGameIdChanged();
                }
            }
        }
        private global::System.Int32 _GameId;
        partial void OnGameIdChanging(global::System.Int32 value);
        partial void OnGameIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 GameTime
        {
            get
            {
                return _GameTime;
            }
            set
            {
                OnGameTimeChanging(value);
                ReportPropertyChanging("GameTime");
                _GameTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GameTime");
                OnGameTimeChanged();
            }
        }
        private global::System.Int16 _GameTime;
        partial void OnGameTimeChanging(global::System.Int16 value);
        partial void OnGameTimeChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "GameSuspect", "Suspect")]
        public EntityCollection<Suspect> PossibleSuspect
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Suspect>("InterpoolModel.GameSuspect", "Suspect");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Suspect>("InterpoolModel.GameSuspect", "Suspect", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "GameNodePath", "NodePath")]
        public EntityCollection<NodePath> NodePath
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<NodePath>("InterpoolModel.GameNodePath", "NodePath");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<NodePath>("InterpoolModel.GameNodePath", "NodePath", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "GameSuspect1", "Suspect")]
        public Suspect Suspect
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Suspect>("InterpoolModel.GameSuspect1", "Suspect").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Suspect>("InterpoolModel.GameSuspect1", "Suspect").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Suspect> SuspectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Suspect>("InterpoolModel.GameSuspect1", "Suspect");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Suspect>("InterpoolModel.GameSuspect1", "Suspect", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "UserGame", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("InterpoolModel.UserGame", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("InterpoolModel.UserGame", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("InterpoolModel.UserGame", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("InterpoolModel.UserGame", "User", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InterpoolModel", Name="Level")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Level : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Level object.
        /// </summary>
        /// <param name="levelId">Initial value of the LevelId property.</param>
        /// <param name="levelName">Initial value of the LevelName property.</param>
        /// <param name="groupFacebookId">Initial value of the GroupFacebookId property.</param>
        public static Level CreateLevel(global::System.Int32 levelId, global::System.String levelName, global::System.String groupFacebookId)
        {
            Level level = new Level();
            level.LevelId = levelId;
            level.LevelName = levelName;
            level.GroupFacebookId = groupFacebookId;
            return level;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LevelId
        {
            get
            {
                return _LevelId;
            }
            set
            {
                if (_LevelId != value)
                {
                    OnLevelIdChanging(value);
                    ReportPropertyChanging("LevelId");
                    _LevelId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LevelId");
                    OnLevelIdChanged();
                }
            }
        }
        private global::System.Int32 _LevelId;
        partial void OnLevelIdChanging(global::System.Int32 value);
        partial void OnLevelIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LevelName
        {
            get
            {
                return _LevelName;
            }
            set
            {
                OnLevelNameChanging(value);
                ReportPropertyChanging("LevelName");
                _LevelName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LevelName");
                OnLevelNameChanged();
            }
        }
        private global::System.String _LevelName;
        partial void OnLevelNameChanging(global::System.String value);
        partial void OnLevelNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GroupFacebookId
        {
            get
            {
                return _GroupFacebookId;
            }
            set
            {
                OnGroupFacebookIdChanging(value);
                ReportPropertyChanging("GroupFacebookId");
                _GroupFacebookId = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("GroupFacebookId");
                OnGroupFacebookIdChanged();
            }
        }
        private global::System.String _GroupFacebookId;
        partial void OnGroupFacebookIdChanging(global::System.String value);
        partial void OnGroupFacebookIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "CityLevel", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("InterpoolModel.CityLevel", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("InterpoolModel.CityLevel", "City").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("InterpoolModel.CityLevel", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("InterpoolModel.CityLevel", "City", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "UserLevel", "User")]
        public EntityCollection<User> User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<User>("InterpoolModel.UserLevel", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<User>("InterpoolModel.UserLevel", "User", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InterpoolModel", Name="New")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class New : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new New object.
        /// </summary>
        /// <param name="newId">Initial value of the NewId property.</param>
        /// <param name="newContent">Initial value of the NewContent property.</param>
        public static New CreateNew(global::System.Int32 newId, global::System.String newContent)
        {
            New @new = new New();
            @new.NewId = newId;
            @new.NewContent = newContent;
            return @new;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 NewId
        {
            get
            {
                return _NewId;
            }
            set
            {
                if (_NewId != value)
                {
                    OnNewIdChanging(value);
                    ReportPropertyChanging("NewId");
                    _NewId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("NewId");
                    OnNewIdChanged();
                }
            }
        }
        private global::System.Int32 _NewId;
        partial void OnNewIdChanging(global::System.Int32 value);
        partial void OnNewIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NewContent
        {
            get
            {
                return _NewContent;
            }
            set
            {
                OnNewContentChanging(value);
                ReportPropertyChanging("NewContent");
                _NewContent = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("NewContent");
                OnNewContentChanged();
            }
        }
        private global::System.String _NewContent;
        partial void OnNewContentChanging(global::System.String value);
        partial void OnNewContentChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "FamousNew", "Famous")]
        public Famous Famous
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Famous>("InterpoolModel.FamousNew", "Famous").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Famous>("InterpoolModel.FamousNew", "Famous").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Famous> FamousReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Famous>("InterpoolModel.FamousNew", "Famous");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Famous>("InterpoolModel.FamousNew", "Famous", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InterpoolModel", Name="NodePath")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class NodePath : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new NodePath object.
        /// </summary>
        /// <param name="nodePathId">Initial value of the NodePathId property.</param>
        /// <param name="nodePathOrder">Initial value of the NodePathOrder property.</param>
        public static NodePath CreateNodePath(global::System.Int32 nodePathId, global::System.String nodePathOrder)
        {
            NodePath nodePath = new NodePath();
            nodePath.NodePathId = nodePathId;
            nodePath.NodePathOrder = nodePathOrder;
            return nodePath;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 NodePathId
        {
            get
            {
                return _NodePathId;
            }
            set
            {
                if (_NodePathId != value)
                {
                    OnNodePathIdChanging(value);
                    ReportPropertyChanging("NodePathId");
                    _NodePathId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("NodePathId");
                    OnNodePathIdChanged();
                }
            }
        }
        private global::System.Int32 _NodePathId;
        partial void OnNodePathIdChanging(global::System.Int32 value);
        partial void OnNodePathIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NodePathOrder
        {
            get
            {
                return _NodePathOrder;
            }
            set
            {
                OnNodePathOrderChanging(value);
                ReportPropertyChanging("NodePathOrder");
                _NodePathOrder = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("NodePathOrder");
                OnNodePathOrderChanged();
            }
        }
        private global::System.String _NodePathOrder;
        partial void OnNodePathOrderChanging(global::System.String value);
        partial void OnNodePathOrderChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "GameNodePath", "Game")]
        public Game Game
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("InterpoolModel.GameNodePath", "Game").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("InterpoolModel.GameNodePath", "Game").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Game> GameReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("InterpoolModel.GameNodePath", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Game>("InterpoolModel.GameNodePath", "Game", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "NodePathFamous", "Famous")]
        public EntityCollection<Famous> Famous
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Famous>("InterpoolModel.NodePathFamous", "Famous");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Famous>("InterpoolModel.NodePathFamous", "Famous", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "NodePathClue", "Clue")]
        public EntityCollection<Clue> Clue
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Clue>("InterpoolModel.NodePathClue", "Clue");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Clue>("InterpoolModel.NodePathClue", "Clue", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "NodePathCity", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("InterpoolModel.NodePathCity", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("InterpoolModel.NodePathCity", "City").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("InterpoolModel.NodePathCity", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("InterpoolModel.NodePathCity", "City", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InterpoolModel", Name="Suspect")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Suspect : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Suspect object.
        /// </summary>
        /// <param name="suspectId">Initial value of the SuspectId property.</param>
        /// <param name="suspectName">Initial value of the SuspectName property.</param>
        /// <param name="suspectPreferenceMusic">Initial value of the SuspectPreferenceMusic property.</param>
        /// <param name="suspectPreferenceMovies">Initial value of the SuspectPreferenceMovies property.</param>
        public static Suspect CreateSuspect(global::System.Int32 suspectId, global::System.String suspectName, global::System.String suspectPreferenceMusic, global::System.String suspectPreferenceMovies)
        {
            Suspect suspect = new Suspect();
            suspect.SuspectId = suspectId;
            suspect.SuspectName = suspectName;
            suspect.SuspectPreferenceMusic = suspectPreferenceMusic;
            suspect.SuspectPreferenceMovies = suspectPreferenceMovies;
            return suspect;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SuspectId
        {
            get
            {
                return _SuspectId;
            }
            set
            {
                if (_SuspectId != value)
                {
                    OnSuspectIdChanging(value);
                    ReportPropertyChanging("SuspectId");
                    _SuspectId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SuspectId");
                    OnSuspectIdChanged();
                }
            }
        }
        private global::System.Int32 _SuspectId;
        partial void OnSuspectIdChanging(global::System.Int32 value);
        partial void OnSuspectIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SuspectName
        {
            get
            {
                return _SuspectName;
            }
            set
            {
                OnSuspectNameChanging(value);
                ReportPropertyChanging("SuspectName");
                _SuspectName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SuspectName");
                OnSuspectNameChanged();
            }
        }
        private global::System.String _SuspectName;
        partial void OnSuspectNameChanging(global::System.String value);
        partial void OnSuspectNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SuspectPreferenceMusic
        {
            get
            {
                return _SuspectPreferenceMusic;
            }
            set
            {
                OnSuspectPreferenceMusicChanging(value);
                ReportPropertyChanging("SuspectPreferenceMusic");
                _SuspectPreferenceMusic = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SuspectPreferenceMusic");
                OnSuspectPreferenceMusicChanged();
            }
        }
        private global::System.String _SuspectPreferenceMusic;
        partial void OnSuspectPreferenceMusicChanging(global::System.String value);
        partial void OnSuspectPreferenceMusicChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SuspectPreferenceMovies
        {
            get
            {
                return _SuspectPreferenceMovies;
            }
            set
            {
                OnSuspectPreferenceMoviesChanging(value);
                ReportPropertyChanging("SuspectPreferenceMovies");
                _SuspectPreferenceMovies = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SuspectPreferenceMovies");
                OnSuspectPreferenceMoviesChanged();
            }
        }
        private global::System.String _SuspectPreferenceMovies;
        partial void OnSuspectPreferenceMoviesChanging(global::System.String value);
        partial void OnSuspectPreferenceMoviesChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "GameSuspect", "Game")]
        public EntityCollection<Game> Game
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Game>("InterpoolModel.GameSuspect", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Game>("InterpoolModel.GameSuspect", "Game", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "GameSuspect1", "Game")]
        public Game Game_1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("InterpoolModel.GameSuspect1", "Game").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("InterpoolModel.GameSuspect1", "Game").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Game> Game_1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("InterpoolModel.GameSuspect1", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Game>("InterpoolModel.GameSuspect1", "Game", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InterpoolModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="userIdFacebook">Initial value of the UserIdFacebook property.</param>
        /// <param name="userTokenFacebook">Initial value of the UserTokenFacebook property.</param>
        public static User CreateUser(global::System.Int32 userId, global::System.String userIdFacebook, global::System.String userTokenFacebook)
        {
            User user = new User();
            user.UserId = userId;
            user.UserIdFacebook = userIdFacebook;
            user.UserTokenFacebook = userTokenFacebook;
            return user;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if (_UserId != value)
                {
                    OnUserIdChanging(value);
                    ReportPropertyChanging("UserId");
                    _UserId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }
        private global::System.Int32 _UserId;
        partial void OnUserIdChanging(global::System.Int32 value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserIdFacebook
        {
            get
            {
                return _UserIdFacebook;
            }
            set
            {
                OnUserIdFacebookChanging(value);
                ReportPropertyChanging("UserIdFacebook");
                _UserIdFacebook = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UserIdFacebook");
                OnUserIdFacebookChanged();
            }
        }
        private global::System.String _UserIdFacebook;
        partial void OnUserIdFacebookChanging(global::System.String value);
        partial void OnUserIdFacebookChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserTokenFacebook
        {
            get
            {
                return _UserTokenFacebook;
            }
            set
            {
                OnUserTokenFacebookChanging(value);
                ReportPropertyChanging("UserTokenFacebook");
                _UserTokenFacebook = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UserTokenFacebook");
                OnUserTokenFacebookChanged();
            }
        }
        private global::System.String _UserTokenFacebook;
        partial void OnUserTokenFacebookChanging(global::System.String value);
        partial void OnUserTokenFacebookChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "UserGame", "Game")]
        public Game Game
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("InterpoolModel.UserGame", "Game").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("InterpoolModel.UserGame", "Game").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Game> GameReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("InterpoolModel.UserGame", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Game>("InterpoolModel.UserGame", "Game", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InterpoolModel", "UserLevel", "Level")]
        public Level Level
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Level>("InterpoolModel.UserLevel", "Level").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Level>("InterpoolModel.UserLevel", "Level").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Level> LevelReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Level>("InterpoolModel.UserLevel", "Level");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Level>("InterpoolModel.UserLevel", "Level", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
